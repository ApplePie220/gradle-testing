import jaci.gradle.nativedeps.NativeLib

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jcraft:jsch:0.1.53'
//        classpath group: 'jaci.gradle', name: 'EmbeddedTools', version: '2017.12.23'
        classpath group: 'gradle.plugin.jaci.gradle', name: 'DeployTools', version: '2018.01.11'
        classpath group: 'de.undercouch', name: 'gradle-download-task', version: '3.1.2'
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
        classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '2018.01.15'
    }
}

plugins {
    id "java"
    id "cpp"
    id "eclipse"
    id "idea"
    id "visual-studio"
    id 'com.gradle.build-scan' version '1.9'
    id "com.dorongold.task-tree" version "1.3"
}
apply plugin: 'jaci.openrio.gradle.GradleRIO'

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

deploy {
    targets {
        target('roborio5333', jaci.openrio.gradle.frc.RoboRIO) {
            team = 5333
            addresses << '10.0.0.155'
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << 'roborio5333'
            robotCommand = false
        }
        artifact('frcNative', jaci.openrio.gradle.frc.FRCNativeArtifact) {
            targets << 'roborio5333'
            component = 'myFrcBinary'
            debug = true
        }
    }
}

model {
//    libraries {
//        ctre(NativeLib) {
//            targetPlatform = 'roborio'
//            headerDirs = []
//            staticMatchers = ['**/*.a']
//            headerDirs = ['cpp/include']
//            libraryMatchers = ['cpp/lib/*.a']
//            file = 'libs/phoenix_v5.0.4.4.zip'
//        }
//    }
    components {
        myFrcBinary(NativeExecutableSpec) {
            targetPlatform 'roborio'
//            targetPlatform 'any64'
            binaries.all {
                cppCompiler.args('-g')
            }
            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                lib library: "wpilib"
                lib library: "ctre"
                lib library: "navx"
                lib library: "openrio.powerup.matchData"
                lib library: "pathfinder"
            }
        }
    }
}

telemetry {
    reportTelemetry = false
}

dependencies {
    compile wpilib()
    // CTRE Phoenix FRC Beta library
    // Download from Teamforge, not currently publically available
//    compile zipTree('libs/phoenix_v5.0.4.4.zip').matching { it.include('java/lib/CTRE_Phoenix.jar') }
//    nativeLib zipTree('libs/phoenix_v5.0.4.4.zip').matching { it.include('java/lib/libCTRE_PhoenixCCI.so') }
    compile ctre()
    compile navx()
    compile openrio.powerup.matchData()
    compile pathfinder()
    simulation sim.nt_ds()
    simulation sim.nt_readout()
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest('test.MyClass')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}